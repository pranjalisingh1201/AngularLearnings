Angular Course 
-------------------

- Angular is a framework for building modern single-page applications.

- Official Documentations - www.angular.io


How is a single page Application different from traditional Application:

Traditional Applications : 

- Each user Action results in a full HTML page load.
- If we do any action in the browser then a request goes to the server and it returns the full page everytime and refresh of the page happens.

Single Page Application:

- A web Application that is composed of a single page.
- Based on user actions, the application page is update.
- Normally performs a partial update instead of a full page load.

Examples of Single- Page Applications:

- Google Maps
- Gmail-Emails

Angular Solution 

- Angular is a framework for building modern single-page applications.

Who,s Using Angular?

- Companies around the world are using Angular : 

- Australian Government Immigration
- Citi Bank Customer Service
- Microsoft Xbox

- Website - www.madewithangular.com

Angular History

- October 2010 - AngularJS 1.0
- October 2016 - Angular 2 (Angular 2 was a complete rewrite of AngularJS. Hence AngularJS and Angular 2 are two different frameworks and two different code bases.
- Angular 2 and higher follow the same framework approach (incremental improvements)
- March 2017 - Angular 4 
- Novemeber 2017 - Angular 5 
- May 2018 - Angular 6
- October 2018 - Angular 7
- May 2019 - Angular 8   
- November 2017 - Angular 9 
- May 2020 - Angular 10
- October 2020 - Angular 11
- May 2021 - Angular 12
- October 2021 - Angular 13
- May 2022 - Angular 14
- October 2022 - Angular 15
- May 2023 - Angular 16 

What is TypeScript?

- Language developed by Microsoft in 2012.
- Free and Open-Source
- Provides static typing support to JavaScipt.
- Helps with IDE Sipport : Code completion and debugging.
- Add support for object-oriented programming.
- Classes, Objects, Inheritance and interfaces etc.
- Official website : www.typesciptlang.org

React Development 

- For React development, we can develop using various languages:

- JavaScipt: extemely popular programming language.
- ECMAScript: standardized version of JavaScipt(ES6,ES9...)
- TypeScript: adds optional types to JavaScipt.
- Other Languages such as Dart etc.

TypeScript is the most popular language for React development.


Why do most React developers use TypeScript?

- Strongly-Types Language with compile time cheching and IDE Support.

- Increased developer productivity and efficiency.


Development Process:

- Create TypeScript code
- Compile the code
- Run the code


Step 1 : Create the TypeScript code

- TypeScript files have .ts extension

Step 2 : Compile the code 

- Web browsers do not understand TypeScript natively.

- Have to convert TypeScript code to JavaScript Code.

- This is known as "transpiling"

- "Transpiling" is accomplished with tsc command 

eg:
>>tsc mydemo.ts

Step 3: Run the code

- To run the JavaScript code, we use the node command.
- Run the generated JavaScript code (.js file)

>> node mydemo.js

- The compiler/ IDE can find errors earlier at compile time.

- JS generates errors only at runtime.
- Hence Compile time errors are way better.



TypeScript Data Types:

1) boolean : true/false
2) number : integer or floating point numbers
3) string : text data. Enclosing in single or double quotes.
4) any : Supports any datatype assignment
5) Others 


Define a Variable 

Syntax : let <variableName>: <type> = <initial value>;

example : let found : boolean = true;

TypeScript "let" keyword

- We are using the new TypeScript let keyword for variable declarations
- As opposed to using traditional JavaScipt var keyword.
- The JavaScript var keyword had a number of gotchas and pitfalls.
- Like Scoping , capturing, Shadowing etc.
- The new Typescript let keyword helps to eliminate those issues.
- TypeScript is strongly Typed.

For long concatinations : use backticks : 
eg:
console.log(`Hi${firstname}{lastname}`);

Growable Arrays
----------------

example :

let sports : string[] = ['Golf', "Cricket"];

sports.push('Baseball');
sports.push('hockey');

for(let sport of sports)
{
console.log(sport);
}

Creating Classes in TypeScript:

- Customer Class

	firstName : string
	lastName : string
	
	constructors
	getter/setter methods.
	
Basic Structure:

class Customer {
	//properties
	//constructors
	//getter/setter methods
}

File name can be any name.

Properties of Class:

class Customer {
//properties
firstName : string ; // Properties are public by default.
lastName : string;
}

Construct an Instance 

class Customer {
	//properties
	firstName : string;
	lastName : string;
}

let myCustomer = new Customer ();

myCustomer.firstName = "Martin";
myCustomer.lastName = "Dixon";

console.log(myCustomer.firstName);
console.log(myCustomer.lastName);

Create a Constructor

class Customer{
	firstName : string;
	lastName : string ; 
	constructor(theFirst:string,thelast:string)// Use constructor keyword
	{
		this.firstName = thefirst;
		this.lastName = thelast;
	}
}


Access Modifiers:

- public - Property is accessible to all classes (default modifier).
- protected - Property is only accessible in current class and subclass.
- private - Property is only accessible in current class.



Note : if we have errors in the code , then to tcs command generates .js file and .js file runs.
- to Prevent this we have a command to stop generating .js files if their is a compilation error.
- tsc --noEmitOnError Customer.ts
- So the flag --noEmitOnError say to not generate a .js file when their is an exsisting compilation error.


Getter/ Setter Methods
-----------------------

class Customer {
	private firstName : string;
	private lastName : string;
	
	public getFirstName() : string
	{
		return this.firstName;
	}
	
	public setFirstName(theFirst: string) : void
	{
		this.firstName = theFirst;
	}
}

let myCustomer = new Customer("Martin","Dixon");

myCustomer.setFirstName("Greg");
console.log(myCustomer.getFirstName());


TypeScript: Accessors - Get/Set

- TypeScript also offers an alternate syntax.
- Define special : get/set methods
- known as Accessors.

Syntax:

- Can give any property name some developers use leading "_".
- Nothing special about "_" No special magic Just a convention.
- Syntax:

	get <space> property ()
	it has no return type.
	set <space> property ()
	it has no return type.
	
Example :

class Customer {
	private _firstName: string;
	private _lastName : string;
	
	public get firstName()
	{
		return this.firstName;
	}
	public set firstName(value:string)
	{
		this.firstName = value;
	}
}

let myCustomer = new Customer("Matin","Dixon");

myCustomer.firstName = "Susan"; //Calls the "set" accessor since we are assigning a value;

// if we dont add public, getter/setter methods will be public by default.

//Variable names and getter / setter method names can be different.

Compiler Flag

- The get/set accessors feature is only supported in ES5 and higher.
- You have to set a compiler flag in order to compile te code.

>> tsc --target ES5 --noEmitOnError Customer.ts

Problem with too many compiler flag:

- You may have noticed , that we have a lot of compiler flags
- TypeScript has a solution : tsconfig.json file.

tsconfig.json
----------------

- tsconfig.json file defines compiler options and project settings.
- Place this file in root of your project directory.

file : tsconfig.json

{
	"compilerOptions":{
		"noEmitOnError":true,
		"target":"es5"
	}
}

- You can also generate a template for this file.

>> tsc --init

- Then edit the tsconfig.json accordingly for your project requirements.

Compiling your Project
----------------------

- Once your project has a tsconfig.json , then you can compile with :

>> tsc 

- No need to give names of TypeScript files. By default , will compile all *.ts files.


Constructor Parameter Properties

class Customer
{
	constructor (private _firstName:string,
	private _lastName:string)//Defines properties and assigns automatically. Minimizes boiler plate coding.
	
}

Modules
-----------

Code Organization
-----------------

- Currently all of our code is in a single file.
- For real-time projects , we would like to place in separate files.

For example : there is a driver.ts file and we want ot use other ts files is Customer.ts , Products.ts etc

- To perform this task we will we use import.

- TypeScript supports the concepts of modules.
- A module can export classes , functions , variables etc.
- Another file can import classes , functions , variables etc from module.

Module Example 
-----------------

import {Customer} from './Customer';//Can give relative direcotry path,Based on file name (leave off .ts).

let myCustomer = new Customer("Martin","Dixon");

console.log(myCustomer.firstname);
console.log(myCustomer.lastName);


To import , first we have to export :

- So we use export keyword before class Customer.

Inheritance
------------------

- TypeScript supports the object-oriented concept of inheritance.
- Define common properties and methods in the superclass.
- Subclass can extend superclasses and add properties and methods.
- Support for abstact classes and overriding.
- TypeScript only supports single inheritance.
- However  you can implement multiple interfaces.

Inheritance Example
------------------------

					Shape
					----------
					x:number
					y:number
					
					get/set
					getInfo():string
					
						|			|
					extends			extends
						|			|
					Circle 		Rectangle
				-----------	 	-----------
		radius:number 			width:number
								length:number
								
		get/set					get/set
		getInfo():string		getInfo():string
		
		
Abstract Classes 
-------------------

- An abstract class represents a general concept.
- For example : Shape, Vahical, Computer etc.
- Can't create an instance of an abstract class.
- Abstract class can also have abstract methods.
- Abstact Methods must be implemented by concrete subclasses.
		

					Shape - Abstract class
					----------
					x:number
					y:number
					
					get/set
					getInfo():string
					calculateArea():number - Abstarct method.
					Every Shape subclass must implement calculateArea().
					
						|			|
					extends			extends
						|			|
					Circle 		Rectangle
				-----------	 	-----------
		radius:number 			width:number
								length:number
								
		get/set					get/set
		getInfo():string		getInfo():string
		calculateArea():number  calculateArea():number
		AreaofCircle - pi*r^2   AreaofRectangle - width*length


Abstract class Example:
----------------------------


Shape.ts
-----------

export abstract class Shape {//abstarct class with abstarct keyword.
	abstract calculateArae(): number; //abstarct method with abstarct keyword.
}		

Rectangle.ts
-------------

import {Shape} from './Shape';

export class Rectangle extends Shape{

calculateArea(): number{ // Override the calculateArea() method
	return this._width*this._length;
}
}


Circle.ts
-----------

import {Shape} from './Shape';

export class Circle extends Shape {
	calculateArea():number{
		return Math.PI*Math.pow(this._radius,2);
	}
}

Creating an Instance 
-------------------------

let myShape = new Shape(10,15);
console.log(myShape.getInfo());

- This will not compile since Shape is an abstact class.
- Can't create instance of abstarct class directly.
- Only Concrete subclasses : Circle Rectangle.

Creating an Array of Shapes
-------------------------------

let myCircle = new Circle(5,10,20);
let myRectangle = new Rectangle(0,0,3,7);

let theShapes: Shape[] = [];
theShapes.push(myCircle);
theShapes.push(myRectangle);

for (let temp of theShapes)
{
	console.log(temp.getInfo());
	console.log("Area="+temp.calculateArea());
	console.log();
} 

TypeScript Interfaces
---------------------------

TypeScript supports interfaces
- Define an interface with a method contract.
- Classes implement the iterface accordingly.
- A class can implement multiple interfaces.
- TypeScript can also use interfaces to support contracts with properties.


Angular Features
----------------------

- Component-base Framework
- Clean Seperation of template coding and application logic.
- Built-in support for data-binding and dependency injection.
- Supports responsive web design and modern frameworks.
- Bootstrap, Google Material Design (Angular Material) and others.

Key Terms
----------

Components : Main Player in an Angular Application, Has two parts:

1. View of User Interface.
2. Class that contains application logic/ event handling for the view.

View Template : The user Interface for the component.
Static HTML with dynamic elements.

Directive : Adds custom behaviour to HTML elements.
Used for looping , conditionals etc.

Service : Helper Class that provides desired functionality.
Retriving data from server , performing a calculation , validation etc.

 Module: A collectioon of relaed components , directives , services etc.
 
 Application UI Composition.
 
 - Header Component.
 - Main Content Component.
 - Footer Component
 - Product Categories Component.
 - Product List Component.
 - Page Navigation Component.
 
 Application Interaction:
 
 - Angular Project (Angular UI + Services written in typescript runs in the browser) -> Rest-Api - > Spring boot Backend -> Database.
 
 Angular Project:
 
 - An Angular Project is Composed of multiple files.
 - HTML , CSS, TypeScript , Config and Images etc.
 
 Creating an Angular Project
 
 - Angular provides a command-line tool to generate a project.
 - Generates the starter files to help you bootstrap your project.
 
 Angular CLI
 
 > npm install --location=global @angular/cli@14.0.7
 
 > ng version //check version
 > ng help
 
 Creating New Projects with Angular CLI
 
 > ng new <your-project-name>
 > ng new my-first-angular-project
 
 Running the Angular Application
 
 cd <your-project-name>
 cd my-first-angular-project
 
 > ng serve
 
 - This command builds the app(compile/transpile)
 - Starts the Server
 - Watches the source files
 - Rebuilds the apps when source is updated(hot reload).
 
 By default listens on port 4200
 http://localhost:4200
 
 > ng serve --open > Also opens a web browser to http://localhost:4200
 
 Changing the Server Port
 
 > ng serve --port 5100
 > ng serve --port 5100 --open
 
 Project Files
 
 angular.json - Angular workspace configuration List of execution targets.
 
 Node modules - local repo of node modules.
 
 package.json - Project Meta data - List of node dependencies.
 
 src - Main source directory
	app - App components , template etc.
	assets - images etc
	envirnoments - Profiles for envirnoments: dev,test, prod etc.
 index.html - Main Launch Page
 polufills.ts - Add support or different browser versions.
 
 test.ts - Unit test cases.
 tsconfig.app.json, tsconfig.json, tsconfig.spec.json - have typescript conpiler configurations.
 
 
 